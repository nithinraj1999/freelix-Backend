"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bcrypt_1 = require("../../../application/services/bcrypt");
const freelancerUseCase_1 = require("../../../application/useCases/freelancer/freelancerUseCase");
const freelancerRepository_1 = require("../../../infrastructure/repositories/freelancerRepository");
const jwt_1 = require("../../../application/services/jwt");
const freelancerController_1 = require("../../controllers/freelancerController");
const multer_1 = require("../../../application/services/multer");
const validator_1 = __importDefault(require("../../middleware/validator"));
const freelancerValidator_1 = require("../../../domain/validation/freelancerValidator");
const freelancerValidator_2 = require("../../../domain/validation/freelancerValidator");
const freelancerAuth_1 = __importDefault(require("../../middleware/freelancerAuth"));
const freelancerValidator_3 = require("../../../domain/validation/freelancerValidator");
const router = express_1.default.Router();
const bcrypt = new bcrypt_1.BcryptPasswordHasher(10);
const jwtToken = new jwt_1.JWT();
const freelancerRepository = new freelancerRepository_1.FreelancerRepository();
const freelancerUseCase = new freelancerUseCase_1.FreelancerUseCase(freelancerRepository, bcrypt, jwtToken);
const freelancerController = new freelancerController_1.FreelancerController(freelancerUseCase, jwtToken);
router.post('/create-freelancer-account', multer_1.upload.single('profilePicture'), (0, validator_1.default)(freelancerValidator_3.becomeFreelancerSchema), freelancerController.createFreelancerAccount.bind(freelancerController));
router.post('/switch-to-buying', freelancerAuth_1.default, freelancerController.switchToBuying.bind(freelancerController));
router.post('/switch-to-selling', freelancerController.switchToSelling.bind(freelancerController));
router.post('/job-list', freelancerAuth_1.default, freelancerController.getJobList.bind(freelancerController));
router.put('/profile/edit', freelancerAuth_1.default, multer_1.upload.single('portfolio'), (0, validator_1.default)(freelancerValidator_1.editProfileSchema), freelancerController.editprofile.bind(freelancerController));
router.post('/job-detils', freelancerAuth_1.default, freelancerController.getJobDetails.bind(freelancerController));
router.post('/check-for-existing-bidder', freelancerAuth_1.default, freelancerController.isExistingBidder.bind(freelancerController));
router.post('/submit-bid', freelancerAuth_1.default, (0, validator_1.default)(freelancerValidator_2.bidSumissionSchema), freelancerController.submitBid.bind(freelancerController));
router.post('/all-bids', freelancerAuth_1.default, freelancerController.getAllBids.bind(freelancerController));
router.put('/edit-my-bid', freelancerAuth_1.default, freelancerController.editMyBid.bind(freelancerController));
router.post('/my-bids', freelancerAuth_1.default, freelancerController.myBids.bind(freelancerController));
router.post('/my-bids/details', freelancerAuth_1.default, freelancerController.myBidDetails.bind(freelancerController));
router.post('/withdraw-my-bid', freelancerAuth_1.default, freelancerController.withdrawBid.bind(freelancerController));
router.post('/freelancer-details', freelancerAuth_1.default, freelancerController.fetchFreelancerDetails.bind(freelancerController));
router.post('/delete-portfolio', freelancerAuth_1.default, freelancerController.deletePortfolioImg.bind(freelancerController));
router.post('/my-orders', freelancerAuth_1.default, freelancerController.getMyOrders.bind(freelancerController));
router.post('/complete-order', freelancerAuth_1.default, multer_1.upload.single('file'), freelancerController.completeOrder.bind(freelancerController));
router.post('/fetch-reviews', freelancerAuth_1.default, freelancerController.fetchReviews.bind(freelancerController));
router.post('/fetch-wallet', freelancerAuth_1.default, freelancerController.fetchWallet.bind(freelancerController));
router.post('/get-dashboard-data', freelancerAuth_1.default, freelancerController.dashboardData.bind(freelancerController));
router.get('/get-all-skills', freelancerAuth_1.default, freelancerController.getSkills.bind(freelancerController));
exports.default = router;
